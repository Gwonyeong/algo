//분할정복

// 분할정복이란? 문제를 최대한 분할해서 다시 조합하는 방법.

// 분할한다? 1~8까지의 합을 구하는 문제라면 이를 (1~4까지 더하는 문제 + 5~8까지 더하는 문제) 로 분할하는 것입니다.
// 다시 (1~4까지 더하는 문제를 1~2까지 더하는 문제, 3~4까지 더하는 문제)로 분할하고 
// 다시 (1~2까지 더하는 문제를 1~1까지, 2~2까지 더하는 문제)로 나누는 겁니다.

// 조합한다? 1~1까지 더하는 문제는 더이상 분해할 수 없습니다. 이런 더이상 분해할 수 없는 시점에서 조합을 시작하게 됩니다.
// 1~1까지 더하는 문제는 더이상 분해할 수 없고, 2~2까지 더하는 문제는 더이상 분해할 수 없으므로 
// 더이상 분해할 수 없는 값인 1과 2를 더합니다. => 3
// 마찬가지로 3~3까지 더하는 문제는 더이상 분해할 수 없고, 4~4까지 더하는 문제는 더이상 분해할 수 없으므로 
// 더이상 분해할 수 없는 값인 3과 4를 더합니다. => 7
// 1~2까지 더하는 문제의 값이 3이고 3~4까지 더하는 문제의 값이 7이므로 1~4까지 더하는 문제는 3+7인 10이 됩니다.
// 이를 반복하면 1~8까지 수를 모두 더하는 문제를 구할 수 있을겁니다.

// 코드적용
// 함수를 두개로 나누어 호출하면 함수가 두개가 생기겠죠?
// =>  devide_concure(arr,1,4) + devide_concure(arr,5, 8) 이라면 1~4까지 더하는 문제, 5~8까지 더하는 문제 두개로 나뉩니다.
// 위의 분할 원리에 의하면 devide_concure(arr,1,4) 는 devide_concure(arr,1,2) + devide_concure(arr,3, 4) 로 나뉠거고 
// devide_concure(arr,1,2)는 devide_concure(arr,1,1) + devide_concure(arr,2,2) 로 나뉘겠죠.

// 결과적으로 devide_concure(arr,1,4) + devide_concure(arr,5, 8) 는
// devide_concure(arr,1,1) + devide_concure(arr,2,2)+devide_concure(arr,3,3) + devide_concure(arr,4,4)+devide_concure(arr,5,5) + devide_concure(arr,6,6)+devide_concure(arr,7,7) + devide_concure(arr,8,8)
// 가 되겠군요.

// 문제

// 배열에 있는 값들을 모두 더해주세요. 반드시 분할정복 방법을 사용해야 합니다.

function solution3(arr, start, end){ //n까지의 합을 구하는 문제
    
    
}
let arr = [1,2,3,4,5,6,7,8]
console.log(solution3(arr)===36)//  매개변수를 직접 채워주세요.

arr = [15,32,1,89,76,45,100,865,345]
console.log(solution3(arr)===1568)//  매개변수를 직접 채워주세요.

arr = [1,10,100,1000,10000,100000,1000000]
console.log(solution3(arr) === 1111111)//  매개변수를 직접 채워주세요.

arr = [10,10,10,10,10,10,10]
console.log(solution3(arr) === 70)//  매개변수를 직접 채워주세요.