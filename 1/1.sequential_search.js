//1. 반복문의 이해
// for (초기화구문; 조건문; 증감문)
// while(조건문)
// 조건문 위치에 있는 값이 true인 경우 계속 반복



// for( ; ;){
//     console.log('안녕하세요!')
// }

// for(let i = 0; ; i++){
//     if(i >= 20){
//         break
//     }
//     console.log(i,'번째')
// }

// while(true){
//     let i = 0;
//     if(i >= 10){
//         break
//     }
//      i++
// }

// let arr = [1,2,3,4,5] 
// for(let i = arr.length; i >=0; i--){
//     console.log(arr[i])
// }

//2 순차탐색

// let arr = [1,2,3,4,5,6,7,8,9,10]
// let arr_N = [1,2,3,4,5...N]
// for(let i = 0; i < arr.length; i++){
//     if(i == 1){
//         console.log('최선의 경우!')
//     }
//     if(i == 10){
//         console.log('최악의 경우!')
//     }
// }



// 3 알고리즘의 성능
// 정확성 : 정확하게 동작하는가?
// 작업량 : 얼마나 적은 연산을 수행하는가?
// 메모리 사용량: 얼마나 적은 메모리를 사용하는가?
// 단순성: 얼마나 단순한가?
// 최적성: 더 이상 개선할 여지가 없을 만큼 최적화되어 있는가?

// 컴퓨터의 성능이 다르고 각 컴퓨터에서 알고리즘을 실행하면 아마 실행시간이 다를 것임. => 컴퓨터의 성능을 생각하지 않고 정의될 수 있어야함.
// 이러한 후보는 작업량

// 최악의 경우
// 1. 아무리 늦어도 오늘 도착합니다.
// 2. 빠르면 오늘 도착합니다.
// 최악의 경우에서 알고리즘 수행시간은 알고리즘을 사용하는 사람들을 안심시킨다.

// 최선의 경우는 별로 도움이 되지 않는다.

// 빅 O표기법
// O(n^2) =>     의 꼴로 쓰고 O of n 이라고 읽는다.
// 가장 최악의 경우를 생각한다.

// [1,2,3,4,5,6,7,8,9,10]

// O(10^2)
// for(let i =0; i< 10; i++){
//     for(let j =0; j < 10; j++){
  
//     }
    
    
// }






// 알고리즘 문제
// 1 번 3이 좋아!
// 권영이가 가장 좋아하는 숫자는 3입니다. 여러 숫자들이 있는 배열에서 3을 찾고 싶은데요, 3이 몇번 째에 있는지 찾아주세요!
// 문제 : 3이 여러개일 경우 가장 왼쪽에 가까운 3의 위치를 찾습니다.
//       가장 왼쪽의 자리는 1이며 오른쪽으로 갈 수록 1씩 늘어납니다.
// 답안: 배열에 3이 없다면 -1을 반환합니다.

// function solution1(arr){
//     return answer
// }
// console.log(solution1([1,2,3,4,5,6,7,8,9,10]) === 3)
// console.log(solution1([5,4,8,6,7,11,16,125,17,18,19,20,15,46,87,95,44,2,3,50]) === 19)
// console.log(solution1([1,2,5,4,8]) === -1)
// console.log(solution1([0,5,4,6,3,3,3]) === 5)

// console.log(" ")
// 2번 백설공주와 일곱난쟁이
// 마녀를 피해 일곱난쟁이와 살고있는 백설공주. 일곱난쟁이들은 착하고 예쁜 백설공주를 아주 좋아했는데요. 이런 백설공주가 있다는 소식이 먼 난쟁이 나라까지 
// 들렸나봅니다. 어느날 백설공주가 잠에서 깨니 다른나라에서 찾아온 난쟁이가 너무 많아진 것 인데요..! 모두가 자신이 일곱 난쟁이중 하나라고 하지만
// 겉모습으로는 비슷하게 생겨서 구별하기가 어려웠습니다. 다만 일곱난쟁이에게 관심이 많았던 백설공주는 그들의 키가 모두 같다는 것을 기억했으며,
// 다른 나라의 난쟁이들은 일곱난쟁이들보다 1cm더 크다는 말을 기억해냈는데요!
// 기억하고 있는 키를 이용해 난쟁이들을 구분하기로 했습니다.
// 조건 1. 일곱난쟁이의 키는 같으며, 단 7명만 존재합니다. 
// 조건 2. 다른 나라에서 온 난쟁이의 키는 일곱 난쟁이보다 1cm가 큽니다. 
// 문제 : 난쟁이의 키가 배열arr로, 일곱 난쟁이의 키가 n으로 주어집니다.
// 답안 : 일곱난쟁이의 자리를 모두 더한값을 반환합니다. (가장 왼쪽을 0번으로 오른쪽으로 갈 수록 1 증가)
// [50,50,50,51,51,50,50,51,51,50,50] => 일곱난쟁이의 자리가 0,1,2,5,6,9,10 이므로 33을 반환합니다.

// function solution2(arr,n){
//     return answer
// }

// console.log(solution2([50,50,50,50,50,50,50,51],50) === 21)
// console.log(solution2([40,40,40,41,41,40,40,40,40,41],40) === 29)
// console.log(solution2([65,65,65,65,65,65,66,66,65],65) === 23)


// console.log(" ")
// 3번 코로나 바이러스
// 때는 2020년 중국에서 심각한 바이러스가 퍼졌다고 합니다. 1차원의 세상에 사는 방역당국은 사람이 밀집할 수 밖에 없는 곳에 벽을 설치하기로 했는데요,
// 확진자가 많아짐에 따라 사람들에게 확진 유무 번호를 부여하기로 했습니다.
// 확진자는 2번, 비확진자는 1번, 0은 빈 공간입니다. 당국은 확진자를 다음의 규칙에 따라 벽에 가두기로 했습니다.
// 1.확진자의 양 옆은 3으로 가둡니다. 
// 2.비확진자가 발견된다면 비확진자의 자리에 0을 넣습니다. 하지만 필요하다면 벽을 설치해야 합니다.
// 3.당 국의 국경은 벽으로 둘러 쌓여있습니다.


// arr이라는 배열이 제시되고 설치한 벽의 수와 구출한 사람 수의 합을 반환합니다.
// 예시: [3,0,0,0,0,2,0,0,2,1,0,0,0,0,1,1,0,0,3]
// 확진이 된 사람을 3이라는 벽으로 가둡니다. 
// 벽  : [3,0,0,0,3,2,3,3,2,3,0,0,0,0,0,0,0,0,3] 
// 답안: 벽을 4개 설치했고 비 확진자 3명을 구출했으므로 4+3인 7을 반환합니다.
// function solution3(arr){
//     return answer
// }
// console.log(solution3([3,2,0,0,0,0,0,2,0,3]) === 3)
// console.log(solution3([3,1,1,1,1,1,1,2,0,3]) === 8)
// console.log(solution3([3,2,2,2,2,2,2,2,3]) === 0)
// console.log(solution3([3,1,0,0,1,1,1,1,0,0,3]) === 5)
console.log(solution3([3,2,2,2,1,1,1,1,1,1,1,2,2,2,2,3]) === 9)

function solution3(arr){
    let sum = 0;
    for(let i =1; i < arr.length-1; i++){
       if(arr[i] === 1){
        arr[i] = 0
        sum++
       }
       if(arr[i] === 0 &&(arr[i-1] === 2 || arr[i+1] === 2)){
        arr[i] = 3
        sum++
       }
       
    }   
    return sum
}

//알고리즘 답안
//111111111111111111111
// function solution(arr){
//     for(let i =0; i < arr.length; i++){
//         if(arr[i] == 3){
//             return i+1
//         }
//     }
//     return -1
// }
//22222222222222
// function solution2(arr,n){
//     let sum = 0;
//     for(let i =0; i < arr.length; i++){
//         if(arr[i] === n){
//             sum += i
//         }
//     }
//     return sum
// }
//33333333333333


//블로그가 아닌 슬랙